# Copyright (C) 2025 Pedro LÃ³pez-Cabanillas
# SPDX-License-Identifier:  GPL-3.0-or-later

cmake_minimum_required(VERSION 3.16)

project(RiffTree
    LANGUAGES CXX
    VERSION 1.0
)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Gui Widgets LinguistTools)

set(TS_FILES
    ${PROJECT_NAME}_en.ts
    ${PROJECT_NAME}_es.ts
)

if (QT_VERSION VERSION_LESS 5.15.0)
    qt5_add_translation(QM_FILES ${TS_FILES})
else()
    qt_add_translation(QM_FILES ${TS_FILES})
endif()

include(TranslationUtils)
add_app_translations_resource(APP_RES ${QM_FILES})
add_qt_translations_resource(QT_RES en es)

add_executable(${PROJECT_NAME}
    main.cpp
    mainwindow.cpp
    mainwindow.h
    resources.qrc
    treeitem.cpp
    treeitem.h
    treemodel.cpp
    treemodel.h
# rifftree: https://github.com/jesustorresdev/rifftree (Apache 2.0 license)
    riff.h
# QHexView: https://github.com/Dax89/QHexView (MIT license)
    qhexview/dialogs/hexfinddialog.cpp
    qhexview/dialogs/hexfinddialog.h
    qhexview/model/buffer/qdevicebuffer.cpp
    qhexview/model/buffer/qdevicebuffer.h
    qhexview/model/buffer/qhexbuffer.cpp
    qhexview/model/buffer/qhexbuffer.h
    qhexview/model/buffer/qmappedfilebuffer.cpp
    qhexview/model/buffer/qmappedfilebuffer.h
    qhexview/model/buffer/qmemorybuffer.cpp
    qhexview/model/buffer/qmemorybuffer.h
    qhexview/model/buffer/qmemoryrefbuffer.cpp
    qhexview/model/buffer/qmemoryrefbuffer.h
    qhexview/model/commands/hexviewcommand.cpp
    qhexview/model/commands/hexviewcommand.h
    qhexview/model/commands/insertcommand.cpp
    qhexview/model/commands/insertcommand.h
    qhexview/model/commands/removecommand.cpp
    qhexview/model/commands/removecommand.h
    qhexview/model/commands/replacecommand.cpp
    qhexview/model/commands/replacecommand.h
    qhexview/model/qhexchanges.h
    qhexview/model/qhexcursor.cpp
    qhexview/model/qhexcursor.h
    qhexview/model/qhexdelegate.cpp
    qhexview/model/qhexdelegate.h
    qhexview/model/qhexdocument.cpp
    qhexview/model/qhexdocument.h
    qhexview/model/qhexmetadata.cpp
    qhexview/model/qhexmetadata.h
    qhexview/model/qhexoptions.h
    qhexview/model/qhexutils.cpp
    qhexview/model/qhexutils.h
    qhexview/qhexview.cpp
    qhexview/qhexview.h
# embedded translations
    ${APP_RES}
    ${QT_RES}
)

set_target_properties(${PROJECT_NAME} PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

target_link_libraries(${PROJECT_NAME} PRIVATE
    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Gui
    Qt${QT_VERSION_MAJOR}::Widgets
)

target_compile_definitions( ${PROJECT_NAME} PRIVATE
    VERSION=${PROJECT_VERSION}
    PROGRAM=${PROJECT_NAME}
    QHEXVIEW_ENABLE_DIALOGS
)

include(GNUInstallDirs)
install(TARGETS ${PROJECT_NAME}
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

if (QT_VERSION VERSION_GREATER_EQUAL 6.0)
    qt_generate_deploy_app_script(
        TARGET ${PROJECT_NAME}
        OUTPUT_SCRIPT deploy_script
        NO_UNSUPPORTED_PLATFORM_ERROR
    )
    install(SCRIPT ${deploy_script})
endif()
